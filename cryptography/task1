#!/usr/bin/python3
import sys
# types: acc, trans, inv, bal, amt, when
reqTypesList = [] # entire list of tuples (includes all data from file): as (hexdata, type)
                # i.e. (4f2d6e009a764394a7cccd4c4af2c276, 'acc'), (6278e1a006f32e83b0e7355e3dc84339, 'trans')

finalTransactions = [] 

def toArray(in_file):  # put .in file data into array
    count=0
    arr = []
    with open(in_file, 'rb') as file:
        while True:
            data = file.read(16)
            if not data:
                break
            hexdata = data.hex()
            arr.append(hexdata)
            count+=1
    return arr

def runIt(fullArr): # run any fns to see outputs or whateva!
    if not tryTransferInvoice(fullArr):
        if not tryTransferBalance(fullArr):
            if not tryInvoiceTransfer(fullArr):
                if not tryInvoiceBalance(fullArr):
                    if not tryBalanceTransfer(fullArr):
                        #print("\n\n\nIDKKDIDKIDKIDKIDKIDK")
                        return
    
    return printTypeOnly()

def printTypeOnly():
    for each in finalTransactions:
        print(each[0])


def tryBalanceTransfer(fullArr):
    # print("\n\n\nTRYING BALANCE-TRANSFER:")
    reqTypesList.append((fullArr[0], 'acc'))
    reqTypesList.append((fullArr[1], 'bal'))

    finalTransactions.append(['BALANCE', fullArr[0],fullArr[1]])

    transferLabeled = False
    invoiceLabeled = False

    i=2
    while i < len(fullArr):
        # mark first 2 lines are balance
        if i+1<len(fullArr) and fullArr[i+1] == reqTypesList[1][0]:
            reqTypesList.append((fullArr[i], 'acc'))
            reqTypesList.append((fullArr[i+1], 'bal'))
            finalTransactions.append(['BALANCE', fullArr[i],fullArr[i+1]])
            i+=1
        
        # check if next transaction is TRANSFER (next 5 lines)
        elif i+5<len(fullArr) and len(fullArr[i:i+5]) == len(set(fullArr[i:i+5])):

            if transferLabeled == False or (transferLabeled == True and (fullArr[i+1], 'trans') in reqTypesList):
                reqTypesList.append((fullArr[i], 'acc'))
                reqTypesList.append((fullArr[i+1], 'trans'))
                reqTypesList.append((fullArr[i+2], 'when'))
                reqTypesList.append((fullArr[i+3], 'amt'))
                reqTypesList.append((fullArr[i+4], 'acc'))
                transferLabeled = True
                finalTransactions.append(['TRANSFER', fullArr[i],fullArr[i+1],fullArr[i+2],fullArr[i+3],fullArr[i+4]])
                i+=4
            
            elif invoiceLabeled == False or (invoiceLabeled == True and (fullArr[i+1], 'inv') in reqTypesList):
                reqTypesList.append((fullArr[i], 'acc'))
                reqTypesList.append((fullArr[i+1], 'inv'))
                reqTypesList.append((fullArr[i+2], 'amt'))
                reqTypesList.append((fullArr[i+3], 'acc'))
                invoiceLabeled = True
                finalTransactions.append(['INVOICE', fullArr[i],fullArr[i+1],fullArr[i+2],fullArr[i+3]])
                
                i+=3
        elif invoiceLabeled == False or (invoiceLabeled == True and (fullArr[i+1], 'inv') in reqTypesList):
            reqTypesList.append((fullArr[i], 'acc'))
            reqTypesList.append((fullArr[i+1], 'inv'))
            reqTypesList.append((fullArr[i+2], 'amt'))
            reqTypesList.append((fullArr[i+3], 'acc'))
            invoiceLabeled = True
            finalTransactions.append(['INVOICE', fullArr[i],fullArr[i+1],fullArr[i+2],fullArr[i+3]])  
            i+=3        
            
        else:
            finalTransactions.clear()
            reqTypesList.clear()
            return False
        i += 1 
    if len(reqTypesList) == len(fullArr):
        return True        

def tryInvoiceBalance(fullArr):
    # print("\n\n\nTRYING INVOICE-BALANCE:")
    if len(fullArr[0:4]) != len(set(fullArr[0:4])):
        return False    
    reqTypesList.append((fullArr[0], 'acc'))
    reqTypesList.append((fullArr[1], 'inv'))
    reqTypesList.append((fullArr[2], 'amt'))
    reqTypesList.append((fullArr[3], 'acc'))
    
    finalTransactions.append(['INVOICE', fullArr[0],fullArr[1],fullArr[2],fullArr[3]])
    
    transferLabeled = False
    balanceLabeled = False    

    i=4
    while i < len(fullArr):
        # mark first 4 lines as invoice
        if i+1<len(fullArr) and fullArr[i+1] == reqTypesList[1][0]:
            if i+3>len(fullArr):
                return False
            else:
                reqTypesList.append((fullArr[i], 'acc'))
                reqTypesList.append((fullArr[i+1], 'inv'))
                reqTypesList.append((fullArr[i+2], 'amt'))
                reqTypesList.append((fullArr[i+3], 'acc'))
                finalTransactions.append(['INVOICE', fullArr[i],fullArr[i+1],fullArr[i+2],fullArr[i+3]])
                i +=3 # go to next transaction 

        # check if next transaction is BALANCE (next 2 lines)    
        elif i+1<len(fullArr) and len(fullArr[i:i+2]) == len(set(fullArr[i:i+2])): # if next 2 lines are unique, then possibly balance

            # if Balance not seen yet OR (Balance seen AND hexdata has already been added to list)
            if balanceLabeled == False or (balanceLabeled == True and (fullArr[i+1], 'bal') in reqTypesList):
                # print("invoiceLabeled == False")
                reqTypesList.append((fullArr[i], 'acc'))
                reqTypesList.append((fullArr[i+1], 'bal'))
                finalTransactions.append(['BALANCE', fullArr[i],fullArr[i+1]])

                balanceLabeled = True

                i += 1 # go to next transaction

            elif transferLabeled == False or (transferLabeled == True and (fullArr[i+1], 'trans') in reqTypesList):
                reqTypesList.append((fullArr[i], 'acc'))
                reqTypesList.append((fullArr[i+1], 'trans'))
                reqTypesList.append((fullArr[i+2], 'when'))
                reqTypesList.append((fullArr[i+3], 'amt'))
                reqTypesList.append((fullArr[i+4], 'acc'))

                finalTransactions.append(['TRANSFER', fullArr[i],fullArr[i+1],fullArr[i+2],fullArr[i+3],fullArr[i+4]])

                transferLabeled = True
                i+=4
            else:
                finalTransactions.clear()
                reqTypesList.clear()
                return False
        elif transferLabeled == False or (transferLabeled == True and (fullArr[i+1], 'trans') in reqTypesList):
            reqTypesList.append((fullArr[i], 'acc'))
            reqTypesList.append((fullArr[i+1], 'trans'))
            reqTypesList.append((fullArr[i+2], 'when'))
            reqTypesList.append((fullArr[i+3], 'amt'))
            reqTypesList.append((fullArr[i+4], 'acc'))

            finalTransactions.append(['TRANSFER', fullArr[i],fullArr[i+1],fullArr[i+2],fullArr[i+3],fullArr[i+4]])

            transferLabeled = True
            i+=4
                
        else:
            finalTransactions.clear()
            reqTypesList.clear()
            return False
        
        i += 1  

    if len(reqTypesList) == len(fullArr):
        return True
    
def tryInvoiceTransfer(fullArr):
    # print("\n\n\nTRYING INVOICE-TRANSFER:")
    if len(fullArr[0:4]) != len(set(fullArr[0:4])):
        return False    
    reqTypesList.append((fullArr[0], 'acc'))
    reqTypesList.append((fullArr[1], 'inv'))
    reqTypesList.append((fullArr[2], 'amt'))
    reqTypesList.append((fullArr[3], 'acc'))
    
    finalTransactions.append(['INVOICE', fullArr[0],fullArr[1],fullArr[2],fullArr[3]])

    transferLabeled = False
    balanceLabeled = False    

    i=4
    while i < len(fullArr):
        # mark first 4 lines as invoice
        if i+1<len(fullArr) and fullArr[i+1] == reqTypesList[1][0]:
            if i+3>len(fullArr):
                return False
            else:
               
                reqTypesList.append((fullArr[i], 'acc'))
                reqTypesList.append((fullArr[i+1], 'inv'))
                reqTypesList.append((fullArr[i+2], 'amt'))
                reqTypesList.append((fullArr[i+3], 'acc'))

                finalTransactions.append(['INVOICE', fullArr[i],fullArr[i+1],fullArr[i+2],fullArr[i+3]])

                i +=3 # go to next transaction 

        # check if next transaction is TRANSFER (next 5 lines)    
        elif i+5<len(fullArr) and len(fullArr[i:i+5]) == len(set(fullArr[i:i+5])): # if next 5 lines are unique, then possibly transfer

            # if Transfer not seen yet OR (Transfer seen AND hexdata has already been added to list)
            if transferLabeled == False or (transferLabeled == True and (fullArr[i+1], 'trans') in reqTypesList):
                # print("invoiceLabeled == False")
                reqTypesList.append((fullArr[i], 'acc'))
                reqTypesList.append((fullArr[i+1], 'trans'))
                reqTypesList.append((fullArr[i+2], 'when'))
                reqTypesList.append((fullArr[i+3], 'amt'))
                reqTypesList.append((fullArr[i+4], 'acc'))
                finalTransactions.append(['TRANSFER', fullArr[i],fullArr[i+1],fullArr[i+2],fullArr[i+3],fullArr[i+4]])

                transferLabeled = True
                i += 4 # go to next transaction

            elif balanceLabeled == False or (balanceLabeled == True and (fullArr[i+1], 'bal') in reqTypesList):
                reqTypesList.append((fullArr[i], 'acc'))
                reqTypesList.append((fullArr[i+1], 'bal'))
                finalTransactions.append(['BALANCE', fullArr[i],fullArr[i+1]])
                balanceLabeled = True
                i+=1
        elif balanceLabeled == False or (balanceLabeled == True and (fullArr[i+1], 'bal') in reqTypesList):
            reqTypesList.append((fullArr[i], 'acc'))
            reqTypesList.append((fullArr[i+1], 'bal'))
            finalTransactions.append(['BALANCE', fullArr[i],fullArr[i+1]])

            balanceLabeled = True
            i+=1
                
        else:
            finalTransactions.clear()
            reqTypesList.clear()
            return False        
        i += 1  
    if len(reqTypesList) == len(fullArr):
        return True


def tryTransferBalance(fullArr):
    # print("\n\n\nTRYING TRANSFER-BALANCE:")
    if len(fullArr[0:5]) != len(set(fullArr[0:5])):
        return False    
    reqTypesList.append((fullArr[0], 'acc'))
    reqTypesList.append((fullArr[1], 'trans'))
    reqTypesList.append((fullArr[2], 'when'))
    reqTypesList.append((fullArr[3], 'amt'))
    reqTypesList.append((fullArr[4], 'acc'))
    
    finalTransactions.append(['TRANSFER', fullArr[0],fullArr[1],fullArr[2],fullArr[3],fullArr[4]])

    invoiceLabeled = False
    balanceLabeled = False
    i=5
    while i < len(fullArr):
        # mark first 5 lines as transfer
        if i+1<len(fullArr) and fullArr[i+1] == reqTypesList[1][0]:
            if i+4>len(fullArr):
                return False
            else:
               
                reqTypesList.append((fullArr[i], 'acc'))
                reqTypesList.append((fullArr[i+1], 'trans'))
                reqTypesList.append((fullArr[i+2], 'when'))
                reqTypesList.append((fullArr[i+3], 'amt'))
                reqTypesList.append((fullArr[i+4], 'acc'))

                finalTransactions.append(['TRANSFER', fullArr[i],fullArr[i+1],fullArr[i+2],fullArr[i+3],fullArr[i+4]])
                
                i +=4 # go to next transaction (should be i+4 but i do i+1 at every run so yeah)
                
        # check if next transaction is BAlANCE (next 2 lines)    
        elif i+1<len(fullArr) and len(fullArr[i:i+2]) == len(set(fullArr[i:i+2])): # if next 2 lines are unique, then possibly balance

            if balanceLabeled == False or (balanceLabeled == True and (fullArr[i+1], 'bal') in reqTypesList):
                reqTypesList.append((fullArr[i], 'acc'))
                reqTypesList.append((fullArr[i+1], 'bal'))

                finalTransactions.append(['BALANCE', fullArr[i],fullArr[i+1]])

                balanceLabeled = True
                i += 1 # go to next transaction

            elif invoiceLabeled == False or (invoiceLabeled == True and (fullArr[i+1], 'inv') in reqTypesList):
                reqTypesList.append((fullArr[i], 'acc'))
                reqTypesList.append((fullArr[i+1], 'inv'))
                reqTypesList.append((fullArr[i+2], 'amt'))
                reqTypesList.append((fullArr[i+3], 'acc'))
                finalTransactions.append(['INVOICE', fullArr[i],fullArr[i+1],fullArr[i+2],fullArr[i+3]])
                invoiceLabeled = True                
                i +=3

            else:
                finalTransactions.clear()
                reqTypesList.clear()
                return False
        i += 1  
    
    if len(reqTypesList) == len(fullArr):
        return True

def tryTransferInvoice(fullArr):
    # print("\n\n\nTRYING TRANSFER-INVOICE:")
    if len(fullArr[0:5]) != len(set(fullArr[0:5])):
        return False

    reqTypesList.append((fullArr[0], 'acc'))
    reqTypesList.append((fullArr[1], 'trans'))
    reqTypesList.append((fullArr[2], 'when'))
    reqTypesList.append((fullArr[3], 'amt'))
    reqTypesList.append((fullArr[4], 'acc'))
    
    finalTransactions.append(['TRANSFER', fullArr[0],fullArr[1],fullArr[2],fullArr[3],fullArr[4]])

    invoiceLabeled = False
    balanceLabeled = False

    i=5
    while i < len(fullArr):
        # mark first 5 lines as transfer
        if i+1<len(fullArr) and fullArr[i+1] == reqTypesList[1][0]:
            if i+4>len(fullArr):
                return False
            else:
               
                reqTypesList.append((fullArr[i], 'acc'))
                reqTypesList.append((fullArr[i+1], 'trans'))
                reqTypesList.append((fullArr[i+2], 'when'))
                reqTypesList.append((fullArr[i+3], 'amt'))
                reqTypesList.append((fullArr[i+4], 'acc'))
                finalTransactions.append(['TRANSFER', fullArr[i],fullArr[i+1],fullArr[i+2],fullArr[i+3],fullArr[i+4]])

                i +=4 # go to next transaction (should be i+4 but i do i+1 at every run so yeah)

        # check if next transaction is INVOICE (next 4 lines)    
        elif i+4<len(fullArr) and len(fullArr[i:i+4]) == len(set(fullArr[i:i+4])): # if next 4 lines are unique, then possibly invoice

            if invoiceLabeled == False or (invoiceLabeled == True and (fullArr[i+1], 'inv') in reqTypesList):
                reqTypesList.append((fullArr[i], 'acc'))
                reqTypesList.append((fullArr[i+1], 'inv'))
                reqTypesList.append((fullArr[i+2], 'amt'))
                reqTypesList.append((fullArr[i+3], 'acc'))
                finalTransactions.append(['INVOICE', fullArr[i],fullArr[i+1],fullArr[i+2],fullArr[i+3]])

                invoiceLabeled = True
                i += 3 # go to next transaction

            elif balanceLabeled == False or (balanceLabeled == True and (fullArr[i+1], 'bal') in reqTypesList):
                reqTypesList.append((fullArr[i], 'acc'))
                reqTypesList.append((fullArr[i+1], 'bal'))
                finalTransactions.append(['BALANCE', fullArr[i],fullArr[i+1]])

                balanceLabeled = True
                i += 1
        elif balanceLabeled == False or (balanceLabeled == True and (fullArr[i+1], 'bal') in reqTypesList):
            reqTypesList.append((fullArr[i], 'acc'))
            reqTypesList.append((fullArr[i+1], 'bal'))
            finalTransactions.append(['BALANCE', fullArr[i],fullArr[i+1]])

            balanceLabeled = True
            i += 1
        else:
            finalTransactions.clear()
            reqTypesList.clear()
            return False
        i += 1

    if len(reqTypesList) == len(fullArr):
        return True    


if __name__ == "__main__":
    if len(sys.argv) != 2:
        # print("NEED TWO ARGUMENTS!!!!!")
        sys.exit(1)

    input_file = sys.argv[1]
    runIt(toArray(input_file))